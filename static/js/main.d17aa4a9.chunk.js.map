{"version":3,"sources":["Utils/Storage.ts","Utils/Request.ts","store/Main/MainStore.ts","store/index.tsx","store/RootStore.ts","Utils/ClassName.ts","pages/Home/VehicleType.tsx","Components/SearchInput.tsx","pages/Home/InfoTable.tsx","pages/Home/Vehicle.tsx","Components/Breadcrumb.tsx","pages/Home/Home.tsx","pages/Home/index.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["DB","constructor","config","DB_NAME","DB_STORE","VERSION","init","Promise","resolve","reject","request","indexedDB","open","this","onerror","error","onsuccess","event","result","onupgradeneeded","db","target","storeNames","objectStoreNames","store","contains","name","createObjectStore","keyPath","key","save","item","tx","transaction","objectStore","oncomplete","onabort","Array","isArray","forEach","add","delete","keys","prototype","concat","update","obj","put","getStore","getAll","version","get","async","url","response","resp","fetch","ok","Error","statusText","json","configure","enforceActions","_initialVehicle","Valor","Marca","Modelo","AnoModelo","Combustivel","CodigoFipe","MesReferencia","TipoVeiculo","SiglaCombustivel","MainStore","selectedBrand","selectedModel","selectedYear","observable","computed","action","selectedType","type","undefined","runInAction","vehicleBrands","cod","console","log","vehicleModels","modelos","vehicleYears","vehicle","mainStore","then","selectVehicleType","connect","component","stores","length","inject","observer","cx","args","classes","value","push","join","VehicleType","ButtonGroup","className","active","onClick","styled","div","SearchInput","props","Container","placeholder","label","InfoTable","PureComponent","super","filterData","onChangeSearch","state","searchTerm","debounce","setState","render","data","title","regex","RegExp","filter","d","test","nome","onChange","List","map","codigo","select","ul","Vehicle","Content","Breadcrumb","items","selectState","idx","isDisabled","nav","main","selectBrand","selectModel","selectYear","CSSTransition","appear","unmountOnExit","timeout","classNames","in","Boolean","window","location","hostname","match","ReactDOM","basename","process","exact","path","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d17aa4a9.chunk.js","sourcesContent":["type Store = {\n  name: string;\n  key: string;\n};\n\ninterface Config {\n  name: string;\n  store: Array<Store>;\n  version?: number;\n}\n\nclass Storage {\n  DB_NAME: string;\n  DB_STORE: Store[];\n  VERSION: number;\n\n  DB?: IDBDatabase;\n\n  constructor(config: Config) {\n    this.DB_NAME = config.name;\n    this.DB_STORE = config.store;\n    this.VERSION = config.version || 1;\n  }\n\n  init = () => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.VERSION);\n      request.onerror = () => reject(request.error);\n\n      request.onsuccess = event => {\n        this.DB = request.result;\n        resolve(event);\n      };\n\n      request.onupgradeneeded = event => {\n        // @ts-ignore\n        const db = event!.target!.result;\n        const storeNames = db.objectStoreNames;\n\n        for (const store of this.DB_STORE) {\n          if (!storeNames.contains(store.name)) {\n            db.createObjectStore(store.name, {\n              keyPath: store.key\n            });\n          }\n        }\n      };\n    });\n  };\n\n  save = (store: string, item: any) => {\n    return new Promise((resolve, reject) => {\n      const tx = this.DB!.transaction(store, \"readwrite\"),\n        objectStore = tx.objectStore(store);\n\n      tx.oncomplete = event => resolve(event);\n      tx.onabort = event => reject(event);\n\n      if (Array.isArray(item)) {\n        item.forEach(item => {\n          objectStore.add(item);\n        });\n      } else objectStore.add(item);\n    });\n  };\n\n  delete = (store: string, keys: string | string[]) => {\n    return new Promise((resolve, reject) => {\n      const tx = this.DB!.transaction(store, \"readwrite\"),\n        objectStore = tx.objectStore(store);\n\n      tx.oncomplete = event => resolve(event);\n      tx.onabort = event => reject(event);\n\n      Array.prototype.concat([], keys).forEach(key => {\n        objectStore.delete(key);\n      });\n    });\n  };\n\n  update = (store: string, obj: any) => {\n    return new Promise((resolve, reject) => {\n      const request = this.DB!.transaction(store, \"readwrite\")\n        .objectStore(store)\n        .put(obj);\n\n      request.onsuccess = event => resolve(event);\n      request.onerror = event => reject(event);\n    });\n  };\n\n  getStore = (store: string) => {\n    return new Promise((resolve, reject) => {\n      const request = this.DB!.transaction(store)\n        .objectStore(store)\n        .getAll();\n\n      // @ts-ignore\n      request.onsuccess = ({ target }) => resolve(target.result);\n      request.onerror = event => reject(event);\n    });\n  };\n\n  get<T>(store: string, key: string): Promise<T | null> {\n    return new Promise((resolve, reject) => {\n      const request = this.DB!.transaction(store)\n        .objectStore(store)\n        .get(key);\n\n      // @ts-ignore\n      request.onsuccess = ({ target }) => resolve(target.result);\n      request.onerror = event => reject(event);\n    });\n  }\n}\n\nconst DB = new Storage({\n  name: \"fipe_api\",\n  store: [\n    {\n      name: \"response\",\n      key: \"url\"\n    }\n  ]\n});\n\nexport default DB;\n","import DB from \"./Storage\";\n\ninterface Result {\n  response: any;\n}\n\nexport async function request(url: string) {\n  const result = await DB.get<Result>(\"response\", url);\n\n  if (result) {\n    return result.response;\n  } else {\n    const resp = await fetch(url);\n    if (!resp.ok) throw new Error(resp.statusText);\n\n    const response = await resp.json();\n\n    DB.update(\"response\", { url, response });\n\n    return response;\n  }\n}\n","import { observable, computed, action, configure, runInAction } from \"mobx\";\nimport { request } from \"../../Utils/Request\";\nimport { VehicleType, VehicleInfo, Vehicle } from \"./store.types\";\n\nconfigure({ enforceActions: \"observed\" });\n\nconst _initialVehicle = {\n  Valor: \"\",\n  Marca: \"\",\n  Modelo: \"\",\n  AnoModelo: \"\",\n  Combustivel: \"\",\n  CodigoFipe: \"\",\n  MesReferencia: \"\",\n  TipoVeiculo: 0,\n  SiglaCombustivel: \"\"\n};\n\nexport class MainStore {\n  @observable selectedType?: VehicleType = \"carros\";\n  @observable selectedBrand?: string;\n  @observable selectedModel?: string;\n  @observable selectedYear?: string;\n\n  @observable vehicleBrands: VehicleInfo[] = [];\n  @observable vehicleModels: VehicleInfo[] = [];\n  @observable vehicleYears: VehicleInfo[] = [];\n  @observable vehicle: Vehicle = _initialVehicle;\n\n  @computed\n  get selectState(): number {\n    if (this.selectedBrand && this.selectedModel && this.selectedYear) {\n      return 3;\n    }\n\n    if (this.selectedBrand && this.selectedModel) {\n      return 2;\n    }\n\n    if (this.selectedBrand) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  @action\n  selectVehicleType = async (type?: VehicleType) => {\n    this.selectedType = type;\n\n    this.selectedBrand = undefined;\n    this.selectedModel = undefined;\n    this.selectedYear = undefined;\n\n    if (!type) return;\n\n    const response = await request(\n      `https://parallelum.com.br/fipe/api/v1/${type}/marcas`\n    );\n\n    runInAction(() => {\n      this.vehicleBrands = response;\n    });\n  };\n\n  @action\n  selectBrand = async (cod?: string) => {\n    this.selectedBrand = cod;\n\n    this.selectedModel = undefined;\n    this.selectedYear = undefined;\n\n    console.log(cod);\n\n    if (!cod) return;\n\n    const response = await request(\n      `https://parallelum.com.br/fipe/api/v1/${this.selectedType}/marcas/${this.selectedBrand}/modelos`\n    );\n\n    runInAction(() => {\n      this.vehicleModels = response.modelos;\n    });\n  };\n\n  @action\n  selectModel = async (cod?: string) => {\n    this.selectedModel = cod;\n\n    this.selectedYear = undefined;\n\n    if (!cod) return;\n\n    const response = await request(\n      `https://parallelum.com.br/fipe/api/v1/${this.selectedType}/marcas/${this.selectedBrand}/modelos/${this.selectedModel}/anos`\n    );\n\n    runInAction(() => {\n      this.vehicleYears = response;\n    });\n  };\n\n  @action\n  selectYear = async (cod?: string) => {\n    this.selectedYear = cod;\n\n    if (!cod) return;\n\n    const response = await request(\n      `https://parallelum.com.br/fipe/api/v1/${this.selectedType}/marcas/${this.selectedBrand}/modelos/${this.selectedModel}/anos/${this.selectedYear}`\n    );\n\n    runInAction(() => {\n      this.vehicle = response;\n    });\n  };\n}\n","import { observer, inject } from \"mobx-react\";\nimport { RootStore } from \"./RootStore\";\n\n// export {} from \"\";\n\nexport default new RootStore();\n\nexport function connect(component: any, stores: string[] = []) {\n  if (stores.length === 0)\n    throw new Error(\"Stores must have at least one store name.\");\n\n  return inject(...stores)(observer(component));\n}\n","import { MainStore } from \"./Main/MainStore\";\nimport DB from \"../Utils/Storage\";\n\nexport class RootStore {\n  mainStore: MainStore;\n\n  constructor() {\n    this.mainStore = new MainStore();\n\n    DB.init().then(() => {\n      this.mainStore.selectVehicleType(\"carros\");\n    });\n  }\n}\n","export const cx = (...args: any[]): string => {\n  const classes = [];\n\n  for (const value of args) {\n    let type = typeof value;\n\n    if (type === \"string\") classes.push(value);\n    else if (type === \"object\") {\n      for (let key in value) {\n        if (value[key]) classes.push(key);\n      }\n    }\n  }\n\n  return classes.join(\" \");\n};\n","import React from \"react\";\nimport { MainStore } from \"../../store/Main/MainStore\";\nimport { connect } from \"../../store\";\nimport { cx } from \"../../Utils/ClassName\";\n\nimport styled from \"@emotion/styled\";\n\nexport const VehicleType = connect(_vehicleType, [\"mainStore\"]);\n\ninterface Props {\n  mainStore: MainStore;\n}\n\nfunction _vehicleType({\n  mainStore: { selectedType, selectVehicleType }\n}: Props) {\n  return (\n    <ButtonGroup>\n      <button\n        className={cx({ active: selectedType === \"motos\" })}\n        onClick={() => selectVehicleType(\"motos\")}\n      >\n        Motos\n      </button>\n      <button\n        className={cx({ active: selectedType === \"carros\" })}\n        onClick={() => selectVehicleType(\"carros\")}\n      >\n        Carros\n      </button>\n      <button\n        className={cx({ active: selectedType === \"caminhoes\" })}\n        onClick={() => selectVehicleType(\"caminhoes\")}\n      >\n        Caminhões\n      </button>\n    </ButtonGroup>\n  );\n}\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  justify-content: center;\n\n  & button {\n    appearance: none;\n    border: 1px solid #eee;\n    background: white;\n\n    color: #333;\n    font-size: 1rem;\n    font-weight: 600;\n\n    padding: 1rem 2rem;\n  }\n\n  & button.active {\n    color: #fff;\n    background: rgb(0, 176, 170);\n    border-color: transparent;\n  }\n\n  & button:last-child {\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n  }\n\n  & button:first-of-type {\n    border-top-left-radius: 4px;\n    border-bottom-left-radius: 4px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { FaSearch } from \"react-icons/fa\";\n\ninterface Props {\n  onChange(e: React.ChangeEvent<HTMLInputElement>): void;\n}\n\nexport const SearchInput: React.SFC<Props> = props => {\n  return (\n    <Container>\n      <input type=\"text\" placeholder=\"Buscar\" {...props} />\n      <FaSearch />\n    </Container>\n  );\n};\n\nconst Container = styled.label`\n  border: 1px solid #333;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n\n  padding: 1rem 1.5rem;\n  overflow: hidden;\n\n  width: 100%;\n\n  & input {\n    flex: 1;\n    border: none;\n    appearance: none;\n    font-size: 1.2rem;\n\n    outline: none;\n  }\n\n  & svg {\n    color: #eee;\n    transition: all 200ms ease;\n  }\n\n  &:hover svg,\n  & input:focus ~ svg {\n    color: #333;\n  }\n`;\n","import React, { PureComponent } from \"react\";\n\n//@ts-ignore\nimport debounce from \"lodash.debounce\";\nimport { SearchInput } from \"../../Components/SearchInput\";\nimport { VehicleInfo } from \"../../store/Main/store.types\";\nimport styled from \"@emotion/styled\";\n\ninterface Props {\n  title: string;\n  data: VehicleInfo[];\n  select(cod: string): void;\n}\n\ninterface State {\n  searchTerm: string;\n}\n\nexport class InfoTable extends PureComponent<Props, State> {\n  filterData: (e: any) => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      searchTerm: \"\"\n    };\n\n    this.filterData = debounce((searchTerm: string) => {\n      this.setState({ searchTerm });\n    }, 800);\n  }\n\n  onChangeSearch = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    this.filterData(value);\n  };\n\n  render() {\n    const { searchTerm } = this.state;\n\n    let { data, title } = this.props;\n\n    if (searchTerm) {\n      const regex = new RegExp(searchTerm, \"i\");\n      data = data.filter(d => regex.test(d.nome));\n    }\n\n    return (\n      <Container>\n        <SearchInput onChange={this.onChangeSearch} />\n        <h1>{title}</h1>\n        <List>\n          {data.map(item => (\n            <li\n              key={item.codigo}\n              onClick={() => this.props.select(item.codigo)}\n            >\n              {item.nome}\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-rows: min-content min-content 1fr;\n  overflow: hidden;\n\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  top: 0;\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  overflow: auto;\n\n  & li {\n    color: #242424;\n    font-weight: 600;\n    padding: 0.35rem;\n    cursor: pointer;\n  }\n\n  & li:nth-child(even) {\n    background: whitesmoke;\n  }\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Vehicle as Vehicletype } from \"../../store/Main/store.types\";\n\ninterface Props {\n  vehicle: Vehicletype;\n}\n\nexport const Vehicle: React.SFC<Props> = ({ vehicle }) => {\n  return (\n    <Container>\n      <h1>Veículo</h1>\n      <Content>\n        <p>\n          Marca: <span>{vehicle.Marca}</span>\n        </p>\n        <p>\n          Modelo: <span>{vehicle.Modelo}</span>\n        </p>\n        <p>\n          Combustível: <span>{vehicle.Combustivel}</span>\n        </p>\n        <p>\n          Valor: <span>{vehicle.Valor}</span>\n        </p>\n      </Content>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-rows: min-content 1fr;\n  overflow: hidden;\n\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  top: 0;\n`;\n\nconst Content = styled.div`\n  & p {\n    margin-bottom: 0.4rem;\n    font-weight: 600;\n  }\n\n  & p span {\n    font-weight: 400;\n  }\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { cx } from \"../Utils/ClassName\";\n\ninterface Props {\n  selectState: number;\n  items: { name: string; action?: () => void }[];\n}\n\nexport const Breadcrumb: React.SFC<Props> = ({ items, selectState }) => {\n  return (\n    <Container>\n      <ul>\n        {items.map((item, idx) => {\n          const isDisabled = idx > selectState + 1;\n          return (\n            <li key={item.name}>\n              <a\n                onClick={() => item.action && item.action()}\n                className={cx({ isDisabled })}\n              >\n                {item.name}\n              </a>\n            </li>\n          );\n        })}\n      </ul>\n    </Container>\n  );\n};\n\nconst Container = styled.nav`\n  font-size: 1rem;\n\n  & ul {\n    list-style: none;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: flex-start;\n    justify-content: flex-start;\n  }\n\n  & li {\n    align-items: center;\n    display: flex;\n  }\n\n  & li + li::before {\n    content: \"/\";\n    color: #333;\n    font-size: inherit;\n  }\n\n  & a {\n    align-items: center;\n    color: #3273dc;\n    display: flex;\n    justify-content: center;\n    padding: 0 0.75em;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n  & a.isDisabled {\n    color: #eee;\n  }\n`;\n","import React from \"react\";\n\nimport { CSSTransition } from \"react-transition-group\";\nimport { MainStore } from \"../../store/Main/MainStore\";\nimport { VehicleType } from \"./VehicleType\";\n\nimport styled from \"@emotion/styled\";\nimport { InfoTable } from \"./InfoTable\";\nimport { Vehicle } from \"./Vehicle\";\nimport { Breadcrumb } from \"../../Components/Breadcrumb\";\n\ninterface Props {\n  mainStore: MainStore;\n}\n\nexport const Home: React.SFC<Props> = ({\n  mainStore: {\n    selectState,\n    selectVehicleType,\n    vehicleBrands,\n    selectBrand,\n    vehicleModels,\n    selectModel,\n    vehicleYears,\n    selectYear,\n    vehicle\n  }\n}) => {\n  return (\n    <Container>\n      <VehicleType />\n\n      <Breadcrumb\n        selectState={selectState}\n        items={[\n          { name: \"Tipo\", action: selectVehicleType },\n          { name: \"Marca\", action: selectBrand },\n          { name: \"Modelo\", action: selectModel },\n          { name: \"Ano\", action: selectYear },\n          { name: \"Veículo\" }\n        ]}\n      />\n\n      <Content>\n        <CSSTransition\n          appear\n          unmountOnExit\n          timeout={500}\n          classNames=\"move\"\n          in={selectState === 0}\n        >\n          <InfoTable data={vehicleBrands} select={selectBrand} title=\"Marcas\" />\n        </CSSTransition>\n\n        <CSSTransition\n          appear\n          unmountOnExit\n          timeout={500}\n          classNames=\"move\"\n          in={selectState === 1}\n        >\n          <InfoTable\n            data={vehicleModels}\n            select={selectModel}\n            title=\"Modelos\"\n          />\n        </CSSTransition>\n\n        <CSSTransition\n          appear\n          unmountOnExit\n          timeout={500}\n          classNames=\"move\"\n          in={selectState === 2}\n        >\n          <InfoTable data={vehicleYears} select={selectYear} title=\"Anos\" />\n        </CSSTransition>\n\n        <CSSTransition\n          appear\n          unmountOnExit\n          timeout={500}\n          classNames=\"move\"\n          in={selectState === 3}\n        >\n          <Vehicle vehicle={vehicle} />\n        </CSSTransition>\n      </Content>\n    </Container>\n  );\n};\n\nconst Content = styled.div`\n  position: relative;\n\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Container = styled.main`\n  margin: 0 auto;\n  padding: 2rem;\n\n  max-width: 900px;\n  min-height: 100vh;\n\n  display: grid;\n  grid-gap: 1.5rem;\n  grid-template-rows: min-content min-content 1fr;\n`;\n","import { connect } from \"../../store\";\n\nimport { Home } from \"./Home\";\n\nexport default connect(Home, [\"mainStore\"]);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nimport { Provider } from \"mobx-react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport store from \"./store\";\nimport { Home } from \"./pages\";\n\nexport default () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider {...store}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </Provider>\n  </BrowserRouter>\n);\n"],"sourceRoot":""}